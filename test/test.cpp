#include <gtest/gtest.h>
#include "LargeNumbers.h"

using LargeNumbers::literals::operator ""_LN;

// Demonstrate some basic assertions.
TEST(Operations, Sum) {
    LargeNumbers::LargeNumber a = 7675062134169158156200484169643546303.350895415883898547574739111522555004_LN;
    LargeNumbers::LargeNumber b = 7577400605210.5121486245749082594389985206080251731834679_LN;
    LargeNumbers::LargeNumber c = 7675062134169158156200491747044151513.8630440404588068070137376321305801771834679_LN;
    EXPECT_EQ(a + b, c);
}

TEST(Operations, Difference) {
    LargeNumbers::LargeNumber a = 6300674508130084305355573339264063556.376803259013732992370157662161133046_LN;
    LargeNumbers::LargeNumber b = 4686966038151.4874232278031021383846748601977925538235758_LN;
    LargeNumbers::LargeNumber c = 6300674508130084305355568652298025404.8893800312106308539854828019633404921764242_LN;
    EXPECT_EQ(a - b, c);
}

TEST(Operations, Division) {
    LargeNumbers::setGlobalPrecision(1000);
    LargeNumbers::LargeNumber a = -2053630165239131896403294349286223950.478124063466515947387409151485172437_LN;
    LargeNumbers::LargeNumber b = 9180835800797.7074120022793147704188492156333842269924585_LN;
    LargeNumbers::LargeNumber c = LargeNumbers::LargeNumber(
            "-223686623941220625960832.0357286091820898046198056365086074699226327540282015"
            "686141845613469818523874406674466945705687567455593040522099373266665504208384393288684309861140242212485653"
            "6495203239129346269566473130552403634032467333971659113318973527757869915979588659029619262518124547069317818"
            "1341867665897472942598224771200232163199726421478365929978363398579690900138433808400247663261286048790557697"
            "0098908012634310674362073452756411658205962228974051747856526087971798198822975441204691813057936644670182002"
            "8064767894006535263548569005225729424498340755531479906468165499955767343038492924173789434894944947356586416"
            "1100841818729223540368546998540692174789126288193262799307148695033334938360677240943591860234400094183965711"
            "9295771252795092065763204176140312010988489258057300345034232169877078926508559357916911069182239921297448267"
            "2644189324591442748246260349268757156653136858244131904914960119831928983591461746407190219566547179132775067"
            "78694414515406249716998142107498260696889061486866520944610295705763407957931");
    EXPECT_EQ(a / b, c);
}

TEST(Operations, Multiplication) {
    LargeNumbers::LargeNumber a = 7502004131698754044639088609820445360.171019643049237362357847855877901428_LN;
    LargeNumbers::LargeNumber b = -9050958041266.3375181826700643281909779160107429175211446_LN;
    LargeNumbers::LargeNumber c = -67900324621412126071840214849235273467329327527206.0748073223832010831727539137350306467600989435298372184982239828875320645344888_LN;
    EXPECT_EQ(a * b, c);
}

TEST(Methods, toString) {
    LargeNumbers::LargeNumber a = -0.000008128788360909512238725679551648758635501867204543936519115597153376678489_LN;
    EXPECT_EQ(a.toString(), "-0.000008128788360909512238725679551648758635501867204543936519115597153376678489");
}

TEST(Methods, getInverse) {
    LargeNumbers::setGlobalPrecision(1000);
    LargeNumbers::LargeNumber a = 0.000008525189798163084907131221312353106022871319009869950550426819934845964728_LN;
    LargeNumbers::LargeNumber b = LargeNumbers::LargeNumber(
            "117299.4412646940850565217194633146194885554453836696583887963043504337084541633731559527818556213771780089"
            "64778362895590624234222565135820068882990224602674746209031635763764245273472315331081105930585567421286707"
            "68683098078489982225247644796265993697061002280705179164562765909643559128848985105655079638224436256946606"
            "69121243261580081350786796298962006541373617140939993423791995372646465316690983490662141698621212633594791"
            "12374672344532311137616174385371654190942180319527136899927111719237152048188806225795821182865228501578279"
            "60254289868623609608972451185046952874220519553647017901813446370767798427277536155313311083414870043732149"
            "30557801433095057574785394426804636840701441174556309471438793665344151339647098496989994463698518993310146"
            "03944775505255669233189039318262508839773334094928314417670917193596859439624380658604564693646436297143825"
            "80024824820059561404626897963642686674389785441994345444610177001757757471489775149664665831242050956901515"
            "82747912994206605086169363134658414453599058");
    EXPECT_EQ(a.getInverse(), b);
}

TEST(Global, getPi) {
    LargeNumbers::setGlobalPrecision(1000);
    LargeNumbers::LargeNumber a = LargeNumbers::getPi();
    LargeNumbers::LargeNumber b = LargeNumbers::LargeNumber(
            "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148"
            "08651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566"
            "59334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881"
            "74881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186"
            "11738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639"
            "52247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091"
            "73637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309"
            "96051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101"
            "00031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321"
            "712268066130019278766111959092164201989");
    EXPECT_EQ(a, b);
}